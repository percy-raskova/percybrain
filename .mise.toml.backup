# mise - Polyglot tool version manager + task runner
# https://mise.jdx.dev/configuration.html

# ============================================================================
# MINIMUM VERSION REQUIREMENT
# ============================================================================
min_version = "2025.10.0"

# ============================================================================
# TOOL VERSIONS
# ============================================================================
[tools]
# Lua ecosystem - Lua 5.1 for hook script compatibility
lua = "5.1"

# Node.js for LSP servers (markdown-oxide, etc.)
node = { version = "22.17.1", postinstall = "npm install -g neovim" }

# Python for pre-commit framework (mise uses pipx under the hood)
python = "3.12"

# StyLua formatter - installed via mise
stylua = "latest"

# Note: luacheck should be installed via system package manager (apt/brew/etc)
# There's no mise backend for it, and tasks below assume system luacheck

# ============================================================================
# ENVIRONMENT VARIABLES
# ============================================================================
[env]
# Lua module paths for require() in tests and development
LUA_PATH = "./lua/?.lua;./lua/?/init.lua;;"
LUA_CPATH = ""

# Suppress npm noise during installations
NPM_CONFIG_AUDIT = "false"
NPM_CONFIG_FUND = "false"
NODE_ENV = "development"

# ============================================================================
# SETTINGS
# ============================================================================
[settings]
# Automatically install tools when not found
not_found_auto_install = true

# Task output format (prefix = show task name, interleave = mixed output)
task_output = "prefix"

# Number of parallel jobs for installs
jobs = 4

# Trust config files in project directory automatically
trusted_config_paths = ["~/.config/nvim"]

# Enable experimental features
experimental = true

# Idiomatic version file support (for .nvmrc, .python-version, etc.)
idiomatic_version_file_enable_tools = ["node", "python"]

# ============================================================================
# DEVELOPMENT TASKS
# ============================================================================

# ----------------------------------------------------------------------------
# Testing Tasks
# ----------------------------------------------------------------------------
[tasks.test]
description = "Run all unit tests (plenary + custom)"
alias = "t"
run = "bash tests/run-all-unit-tests.sh"
sources = ["tests/**/*.lua", "lua/**/*.lua"]

[tasks."test:ollama"]
description = "Run Ollama AI integration tests"
run = "bash tests/run-ollama-tests.sh"
sources = ["tests/plenary/unit/ai-sembr/ollama_spec.lua", "lua/plugins/ai-sembr/ollama.lua"]

[tasks."test:plenary"]
description = "Run plenary test suite directly"
run = "bash tests/run-plenary.sh"
sources = ["tests/plenary/**/*.lua"]

[tasks."test:watch"]
description = "Run tests in watch mode (requires inotify-tools)"
run = """
#!/bin/bash
echo "üëÅÔ∏è  Watching for changes in tests/ and lua/ ..."
while true; do
  clear
  echo "Running tests..."
  mise run test || true
  echo ""
  echo "Waiting for changes..."
  inotifywait -qre close_write tests/ lua/ 2>/dev/null || {
    echo "‚ö†Ô∏è  inotify-tools not installed. Install with: apt install inotify-tools"
    exit 1
  }
done
"""

# ----------------------------------------------------------------------------
# Code Quality Tasks
# ----------------------------------------------------------------------------
[tasks.lint]
description = "Run luacheck static analysis on lua/ directory"
alias = "l"
run = "luacheck lua/ --no-color --codes"
sources = ["lua/**/*.lua", ".luacheckrc"]

[tasks.format]
description = "Auto-format Lua code with stylua"
alias = "f"
run = "stylua ."
sources = ["lua/**/*.lua", "tests/**/*.lua", "hooks/**/*.lua"]

[tasks."format:check"]
description = "Check stylua formatting without making changes"
run = "stylua --check ."
sources = ["lua/**/*.lua", "tests/**/*.lua", "hooks/**/*.lua"]

# ----------------------------------------------------------------------------
# Pre-commit Hook Tasks
# ----------------------------------------------------------------------------
[tasks."hooks:install"]
description = "Install pre-commit git hooks"
run = "pre-commit install"
outputs = [".git/hooks/pre-commit"]

[tasks."hooks:run"]
description = "Run all pre-commit hooks manually on all files"
run = "pre-commit run --all-files"

[tasks."hooks:update"]
description = "Update pre-commit hook versions (autoupdate)"
run = "pre-commit autoupdate"
outputs = [".pre-commit-config.yaml"]

# ----------------------------------------------------------------------------
# Git Operation Tasks
# ----------------------------------------------------------------------------
[tasks."git:status"]
description = "Enhanced git status with branch and upstream info"
alias = "gs"
run = """
git status
echo ""
echo "üìç Current branch: $(git branch --show-current)"
echo "üîó Upstream: $(git rev-parse --abbrev-ref @{upstream} 2>/dev/null || echo 'none')"
echo "üìä Commits ahead/behind: $(git rev-list --left-right --count @{upstream}...HEAD 2>/dev/null || echo 'N/A')"
"""

[tasks."git:branch"]
description = "List git branches with last commit info"
alias = "gb"
run = "git branch -vv"

# ----------------------------------------------------------------------------
# Composite Quality Tasks
# ----------------------------------------------------------------------------
[tasks.check]
description = "Full quality check: lint + format + test + hooks"
depends = ["lint", "format:check", "test", "hooks:run"]

[tasks.quick]
description = "Quick validation: lint + format check (fast feedback)"
alias = "q"
depends = ["lint", "format:check"]

[tasks.fix]
description = "Auto-fix all issues: format + hooks"
depends = ["format", "hooks:run"]

# ----------------------------------------------------------------------------
# Development Setup Tasks
# ----------------------------------------------------------------------------
[tasks.setup]
description = "First-time development setup (run once)"
run = """
#!/bin/bash
set -e

echo "üì¶ Installing tools from mise.toml..."
mise install

echo ""
echo "ü™ù Installing pre-commit hooks..."
pre-commit install

echo ""
echo "üîç Verifying luacheck installation..."
luacheck --version || echo "‚ö†Ô∏è  luacheck not found - check cargo installation"

echo ""
echo "üé® Verifying stylua installation..."
stylua --version

echo ""
echo "üß™ Running initial test suite..."
mise run test || echo "‚ö†Ô∏è  Some tests failed - review output above"

echo ""
echo "‚úÖ Setup complete!"
echo ""
echo "Available commands:"
echo "  mise tasks          - List all tasks"
echo "  mise run test       - Run tests"
echo "  mise run lint       - Lint code"
echo "  mise run format     - Format code"
echo "  mise run check      - Full quality check"
"""

# ----------------------------------------------------------------------------
# Cleanup Tasks
# ----------------------------------------------------------------------------
[tasks.clean]
description = "Clean temporary files, caches, and build artifacts"
run = """
#!/bin/bash
echo "üßπ Cleaning temporary files..."

# Remove pre-commit cache
rm -rf .cache/

# Remove Python cache
find . -type f -name '*.pyc' -delete
find . -type d -name '__pycache__' -delete

# Remove Lua compiled files
find . -type f -name 'luac.out' -delete

# Remove test artifacts
rm -f tests/*.log

echo "‚úÖ Cleaned temporary files"
"""

[tasks."clean:full"]
description = "Deep clean including mise cache and pre-commit environments"
depends = ["clean"]
run = """
#!/bin/bash
echo "üßπ Deep cleaning mise cache and pre-commit environments..."

pre-commit clean || true
mise cache clear

echo "‚úÖ Deep clean complete"
"""

# ----------------------------------------------------------------------------
# Documentation Tasks
# ----------------------------------------------------------------------------
[tasks.docs]
description = "Generate/update project documentation"
run = """
#!/bin/bash
echo "üìö Documentation tasks:"
echo "  - Run 'mise tasks' to see this output"
echo "  - See claudedocs/ for design docs"
echo "  - See README.md for project overview"
"""

# ----------------------------------------------------------------------------
# Neovim-Specific Tasks
# ----------------------------------------------------------------------------
[tasks.nvim]
description = "Launch Neovim with PercyBrain config"
run = "nvim"

[tasks."nvim:check"]
description = "Run Neovim health checks"
run = "nvim --headless -c 'checkhealth' -c 'qa'"

# ============================================================================
# METADATA (ignored by mise, useful for documentation)
# ============================================================================
[_]
project = "PercyBrain"
description = "Neovim-based Integrated Writing Environment with Zettelkasten"
repository = "https://github.com/percypercy/percybrain"
maintainer = "Percy"
