#!/bin/bash
#
# PercyBrain Pre-Push Hook
# Runs full validation including PercyBrain tests
#

# Allow skipping with SKIP_HOOKS=1
if [ -n "$SKIP_HOOKS" ]; then
  echo "⊘ Skipping pre-push hooks (SKIP_HOOKS=1)"
  exit 0
fi

# Colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m'

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/../.." && pwd)"

echo ""
echo -e "${BLUE}🚀 Running pre-push validation...${NC}"
echo ""

HAS_ERRORS=false

#
# 1. Lua diagnostics (lua-language-server)
#
echo -e "${YELLOW}[1/3] Running Lua diagnostics...${NC}"

if ! command -v lua-language-server &> /dev/null; then
  echo -e "${YELLOW}⚠ lua-language-server not installed, skipping diagnostics${NC}"
  echo "  Install: ./scripts/install-lua-tools.sh"
else
  # lua-language-server --check requires a workspace
  # For now, just verify it's available
  echo -e "${GREEN}✓ lua-language-server available${NC}"
fi
echo ""

#
# 2. Format all Lua files
#
echo -e "${YELLOW}[2/3] Checking all Lua files formatting...${NC}"

if ! command -v stylua &> /dev/null; then
  echo -e "${YELLOW}⚠ StyLua not installed, skipping format check${NC}"
else
  if stylua --check "$PROJECT_ROOT/lua" 2>&1; then
    echo -e "${GREEN}✓ All Lua files formatted correctly${NC}"
  else
    echo -e "${RED}✗ Formatting issues detected${NC}"
    echo "Fix with: ${BLUE}stylua lua/${NC}"
    HAS_ERRORS=true
  fi
fi
echo ""

#
# 3. Run PercyBrain tests
#
echo -e "${YELLOW}[3/3] Running PercyBrain tests...${NC}"

if [ -f "$PROJECT_ROOT/tests/quick-check.sh" ]; then
  cd "$PROJECT_ROOT/tests"
  if ./quick-check.sh; then
    echo -e "${GREEN}✓ PercyBrain health check passed${NC}"
  else
    echo -e "${RED}✗ PercyBrain health check failed${NC}"
    HAS_ERRORS=true
  fi
else
  echo -e "${YELLOW}⚠ PercyBrain tests not found${NC}"
fi
echo ""

# Final result
if [ "$HAS_ERRORS" = true ]; then
  echo -e "${RED}╔════════════════════════════════════╗${NC}"
  echo -e "${RED}║  ❌ PRE-PUSH VALIDATION FAILED     ║${NC}"
  echo -e "${RED}╚════════════════════════════════════╝${NC}"
  echo ""
  echo "Fix errors above or skip with: ${YELLOW}SKIP_HOOKS=1 git push${NC}"
  exit 1
fi

echo -e "${GREEN}╔════════════════════════════════════╗${NC}"
echo -e "${GREEN}║  ✅ PRE-PUSH VALIDATION PASSED     ║${NC}"
echo -e "${GREEN}╚════════════════════════════════════╝${NC}"
echo ""

exit 0
