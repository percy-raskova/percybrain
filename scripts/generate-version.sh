#!/bin/bash
# Generate version.lua file from semantic version
# Usage: ./scripts/generate-version.sh 1.2.3

set -euo pipefail

VERSION="${1:-}"

if [ -z "$VERSION" ]; then
    echo "❌ Error: Version argument required"
    echo "Usage: $0 <version>"
    echo "Example: $0 1.2.3"
    exit 1
fi

# Validate semantic version format
if ! [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
    echo "❌ Error: Invalid version format: $VERSION"
    echo "Expected format: major.minor.patch (e.g., 1.2.3)"
    exit 1
fi

# Parse version components
MAJOR=$(echo "$VERSION" | cut -d. -f1)
MINOR=$(echo "$VERSION" | cut -d. -f2)
PATCH=$(echo "$VERSION" | cut -d. -f3)

# Ensure output directory exists
mkdir -p lua/oviwrite

# Generate version.lua
cat > lua/oviwrite/version.lua << EOF
-- PercyBrain Version Information
-- Auto-generated by scripts/generate-version.sh
-- DO NOT EDIT MANUALLY - This file is generated during release

---@class PercyBrainVersion
local M = {}

--- Full semantic version string
M.version = "$VERSION"

--- Version components
M.major = $MAJOR
M.minor = $MINOR
M.patch = $PATCH

--- Git tag (with 'v' prefix)
M.tag = "v$VERSION"

--- Release date (generated at release time)
M.release_date = "$(date -u +%Y-%m-%d)"

--- Check if current version is at least the specified version
---@param required string Minimum required version (e.g., "1.2.0")
---@return boolean
function M.is_at_least(required)
  local req_parts = vim.split(required, ".", { plain = true })
  local req_major = tonumber(req_parts[1]) or 0
  local req_minor = tonumber(req_parts[2]) or 0
  local req_patch = tonumber(req_parts[3]) or 0

  if M.major > req_major then return true end
  if M.major < req_major then return false end

  if M.minor > req_minor then return true end
  if M.minor < req_minor then return false end

  return M.patch >= req_patch
end

--- Get version as table
---@return table { major: number, minor: number, patch: number, string: string }
function M.as_table()
  return {
    major = M.major,
    minor = M.minor,
    patch = M.patch,
    string = M.version,
  }
end

--- Get version string (for display)
---@return string
function M.get_version()
  return M.version
end

--- Get full version info string (for debugging)
---@return string
function M.get_info()
  return string.format(
    "PercyBrain v%s (released %s)",
    M.version,
    M.release_date
  )
end

return M
EOF

echo "✅ Generated lua/oviwrite/version.lua"
echo "   Version: $VERSION"
echo "   Components: $MAJOR.$MINOR.$PATCH"
echo "   Release date: $(date -u +%Y-%m-%d)"
