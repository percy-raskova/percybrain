name: Quick Validation

on:
  push:
    branches: ['**']
  pull_request:
    branches: ['**']

jobs:
  validate:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Neovim
        uses: rhysd/action-setup-vim@v1
        with:
          neovim: true
          version: stable

      - name: Cache lazy.nvim plugins
        uses: actions/cache@v4
        with:
          path: ~/.local/share/nvim/lazy
          key: ${{ runner.os }}-lazy-${{ hashFiles('lazy-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-lazy-

      - name: Make scripts executable
        run: chmod +x scripts/*.sh

      - name: Run Layer 1 validation (static)
        id: layer1
        run: |
          echo "::group::Layer 1: Static Validation"
          ./scripts/validate-layer1.sh
          echo "::endgroup::"

      - name: Run Layer 2 validation (structural)
        id: layer2
        run: |
          echo "::group::Layer 2: Structural Validation"
          nvim --headless -l scripts/validate-layer2.lua
          echo "::endgroup::"

      - name: Upload validation report (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: validation-report-quick
          path: |
            /tmp/validation-*.txt
            /tmp/*.log
          retention-days: 7

      - name: Comment validation results
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let comment = '## ‚ùå Quick Validation Failed\n\n';
            comment += '**Layers tested**: Static (Layer 1), Structural (Layer 2)\n\n';
            comment += 'Please review the validation errors above and fix before merging.\n\n';
            comment += 'Run locally: `./scripts/validate.sh`\n';
            comment += 'Skip (use sparingly): `SKIP_VALIDATION=1 git commit`\n';

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
